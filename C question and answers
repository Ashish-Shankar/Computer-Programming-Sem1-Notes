Question 1 
Discuss the main characteristics and advantages of the C programming language. What impact has the language C had on developing contemporary programming languages?

Answer: 
The C programming language, developed in the early 1970s by Dennis Ritchie at Bell Labs, has been instrumental in shaping modern programming. It remains one of the most influential and widely used languages today. Here are some of its main characteristics and advantages, along with its impact on contemporary programming languages:
Characteristics of C
	1. Low-level Language with High-level Constructs: C balances low-level memory manipulation and high-level abstractions, making it close to machine language yet still user-friendly.
	2. Portability: C is highly portable, allowing code to be compiled and run on various hardware architectures with minimal modification.
	3. Modularity and Structure: C promotes structured programming and modularity, allowing code to be broken down into functions and modules. This aids code readability, reusability, and maintainability.
	4. Efficient and Fast: Known for its efficiency, C provides fine-grained control over memory management, making it faster and suitable for system-level programming.
	5. Rich Library Support: The Standard Library in C offers a wide array of functions, from mathematical computations to input/output operations, which enhance its functionality.
	6. Pointers: C has robust pointer support, allowing direct manipulation of memory addresses, which is crucial for systems programming and resource-constrained environments.
Advantages of C
	1. System-Level Access: C allows low-level access to memory and system resources, which is why it's heavily used for operating systems, embedded systems, and systems programming.
	2. Extensive Community and Resources: With its long history, C has a vast community, extensive documentation, and well-developed libraries, making learning and problem-solving easier.
	3. Foundation of Many Languages: C has influenced numerous languages like C++, C#, Java, Python, and even scripting languages like Perl and PHP. It provides a foundation for understanding memory management and efficient programming.
	4. Universal Compiler Support: C compilers are available for nearly every platform, ensuring that C code can be compiled and run on almost any machine.
	5. Versatile Use: C is used in developing applications across different fields, including operating systems (UNIX, Linux), embedded systems, databases, and performance-critical applications.
Impact of C on Contemporary Programming Languages
	1. Influence on Syntax and Paradigms: Many modern programming languages, such as C++, Java, C#, and JavaScript, have adopted C-like syntax, making C's style a foundation for syntactical conventions in programming.
	2. Object-Oriented Extensions: C laid the groundwork for object-oriented programming (OOP) in C++ by introducing structured programming. Its model of structuring and modularity helped guide the development of classes and objects in OOP languages.
	3. Memory Management Insights: Concepts such as pointers, memory allocation, and deallocation in C led to a better understanding of memory management in languages like Python, Java, and Rust. These languages include more automated memory management but owe their origins to the direct control C provided.
	4. System Programming Foundations: C established the concept of portability in system programming, inspiring the development of languages like Rust and Go, which aim to bring system-level efficiency to modern, secure environments.
	5. Compilation and Execution Models: The C language’s compiled nature influenced languages like Swift and Rust, which seek to balance efficient compilation with runtime performance. Its model serves as a benchmark for compiled languages that aim for both speed and portability.


Question 2
What constitutes a decision control structure in the realm of C programming? Give an illustration of how an 'if-else' statement may be employed within a program. 

Answer:
In C programming, a decision control structure allows the program to make choices based on certain conditions. The most common decision control structures in C are if, if-else, and switch statements. These structures enable a program to execute specific blocks of code depending on whether a condition is true or false.
'If-else' Statement
An if-else statement is used to evaluate a condition and execute one block of code if the condition is true and another if it is false. The general syntax for an if-else statement in C is:

c
Copy code
if (condition) {
    // Code to execute if the condition is true
} else {
    // Code to execute if the condition is false
}
Example of 'If-Else' Statement
Here’s an example of an if-else statement in a simple C program that checks if a number is even or odd:


Copy code
#include <stdio.h>
int main() {
    int number;
// Asking the user to enter a number
    printf("Enter an integer: ");
    scanf("%d", &number);
// If-else statement to check if the number is even or odd
    if (number % 2 == 0) {
        printf("%d is even.\n", number);
    } else {
        printf("%d is odd.\n", number);
    }
return 0;
}
Explanation
	1. The program first prompts the user to enter an integer.
	2. It then checks if the number is even or odd using the if-else statement.
	3. The condition number % 2 == 0 checks if the remainder when a number is divided by 2 is zero. If true, the program prints that the number is even; otherwise, it prints that the number is odd.
Output
If the user enters 4, the output would be:

4 is even.
If the user enters 7, the output would be:

7 is odd.
The if-else decision control structure enables C programs to make logical decisions and execute different blocks of code based on specific conditions



Question 3
Elucidate the dissimilarity between a 'while' loop and a 'do-while' loop. When might you opt for a 'do-while' loop instead of a 'while' loop?

Answer:
In C, the difference between a while loop and a do-while loop primarily comes down to when the condition is checked about the loop body’s execution. Here’s a quick breakdown of each with examples.
Key Differences
	1. Condition Checking:
		○ while loop: Checks the condition before executing the loop body. If the condition is initially false, the loop body won’t execute at all.
		○ do-while loop: Checks the condition after executing the loop body, ensuring the body executes at least once regardless of the initial condition.
	2. Syntax:
		○ while loop:

while (condition) {
    // Code to execute as long as the condition is true
}
		○ do-while loop:

do {
    // Code to execute at least once
} while (condition);
Example of a while Loop
The following example uses a while loop to print numbers from 1 to 5, as long as the condition is true.

#include <stdio.h>
int main() {
    int i = 1;
while (i <= 5) {
        printf("%d\n", i);
        i++;
    }
return 0;
}
Output:

Copy code
1
2
3
4
5
If the condition i <= 5 is initially false (say i = 6), the loop won’t execute at all.
Example of a do-while Loop
Here’s a similar example with a do-while loop, where we print numbers from 1 to 5. This loop will execute the body at least once, regardless of the condition.

#include <stdio.h>
int main() {
    int i = 1;
do {
        printf("%d\n", i);
        i++;
    } while (i <= 5);
return 0;
}
Output:


1
2
3
4
5
Use Case for do-while
A do-while loop is especially useful in cases where the code must execute at least once, such as repeatedly asking for user input until a valid response is received. Here’s an example:

#include <stdio.h>
int main() {
    int password;
do {
        printf("Enter the password (hint: 1234): ");
        scanf("%d", &password);
    } while (password != 1234);
printf("Access granted.\n");
return 0;
}
Explanation:
	• Here, the do-while loop ensures the prompt executes at least once.
	• If the user enters an incorrect password, they’ll be prompted again.
Summary
	• Use while loop when the condition might prevent the loop from executing at all.
	• Use do-while loop when you want to ensure the loop body executes at least once before the condition is checked.


Question 4

Explain the functioning of a 'for' loop in the C programming language. Please describe a situation where a 'for' loop would be the most suitable option for iterating through a code block. 

Answer:
Understanding the for Loop in C
The for loop in C is a control structure for repeating a block of code a set number of times. It is best used when the number of iterations is known beforehand.
Syntax

for (initialization; condition; update) {
    // Code to execute on each iteration
}
	• Initialization: This step is executed once at the beginning, where we usually set the starting value of a loop variable.
	• Condition: This checks whether the loop should continue running. If the condition is true, the loop continues; if false, it stops.
	• Update: This runs after each iteration, updating the loop variable, often by incrementing or decrementing it.
Example: Basic for Loop
Here’s a simple program using a for loop to print numbers from 1 to 5.

#include <stdio.h>
int main() {
    int i;
for (i = 1; i <= 5; i++) {
        printf("%d\n", i);
    }
return 0;
}
Explanation:
	1. Initialization: i = 1 sets the starting value of i.
	2. Condition: i <= 5 ensures the loop runs only as long as i is less than or equal to 5.
	3. Update: i++ increments i by 1 after each loop iteration.
Output:


1
2
3
4
5
When to Use a for Loop
A for loop is ideal when the number of iterations is fixed or known ahead of time. For example, calculating the sum of the first n natural numbers is a situation where a for loop is appropriate.
Example Scenario: Sum of First n Numbers
Here’s a program that uses a for loop to calculate the sum of the first n numbers entered by the user.

#include <stdio.h>
int main() {
    int n, sum = 0;
printf("Enter a positive integer: ");
    scanf("%d", &n);
for (int i = 1; i <= n; i++) {
        sum += i;  // Adds i to sum in each iteration
    }
printf("Sum of the first %d numbers is: %d\n", n, sum);
return 0;
}
Explanation:
	• Initialization: i = 1, starting from 1.
	• Condition: i <= n, loop continues until i exceeds n.
	• Update: i++, incrementing i by 1 each time.
Example Output: If the user inputs 5, the output will be:
Sum of the first 5 numbers is: 15
This program demonstrates how a for loop is well-suited for tasks where the number of repetitions is predetermined.


Question 5
 Write a brief program in C that utilises both decision control structures and loop
control structures to address a situation. Provide an elucidation of the program's
functionality and the significance of each control structure within the resolution.


Answer:
Here’s a C program that combines both decision control structures (if-else) and a loop control structure (for loop) to determine the grades of students based on their scores and print whether they passed or failed. This example showcases how decision-making and looping can be combined to process multiple entries efficiently.

Program: Grading System
#include <stdio.h>

int main() {
    int n, score;

    // Ask the user how many students' scores they want to enter
    printf("Enter the number of students: ");
    scanf("%d", &n);

    // Loop to process each student's score
    for (int i = 1; i <= n; i++) {
        printf("Enter score for student %d: ", i);
        scanf("%d", &score);

        // Decision control structure to determine pass or fail
        if (score >= 50) {
            printf("Student %d: Pass\n", i);
        } else {
            printf("Student %d: Fail\n", i);
        }
    }

    return 0;
}
Explanation of Program Functionality
User Input for Number of Students: The program begins by prompting the user to enter the number of students (n). This helps determine how many times the loop should run, as we’ll need to process each student’s score.

Loop Control Structure (for loop):

A for loop is used to repeat the input and evaluation process for each student, from 1 to n. This loop iterates n times, which allows the program to handle any number of students specified by the user.
This loop structure is ideal here because the number of iterations is known (equal to the number of students).
Decision Control Structure (if-else statement):

Within each iteration, the program prompts the user to enter a score for the current student.
The if-else statement then checks if the score is 50 or higher. If so, the student has passed, and “Pass” is printed. Otherwise, “Fail” is printed.
This decision structure allows the program to evaluate each student’s score and make a decision on whether they passed or failed.
Significance of Each Control Structure
for loop: The for loop is essential for processing multiple students in one go, enabling the program to scale according to the input. It prevents the need to write repetitive code for each student, making the program efficient and flexible.

if-else statement: This decision control structure helps classify each student as either "Pass" or "Fail" based on their score. Without it, the program wouldn’t be able to differentiate between passing and failing scores.

Sample Output
If the user enters 3 students with scores 55, 42, and 73, the output will be:

Enter the number of students: 3
Enter score for student 1: 55
Student 1: Pass
Enter score for student 2: 42
Student 2: Fail
Enter score for student 3: 73
Student 3: Pass
This program demonstrates a practical way of using both looping and decision-making to solve a problem effectively.
